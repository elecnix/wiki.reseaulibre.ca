This guide describes the procedure to compile images for Reseau Libre.  This default procedure is the one used to compile the images that can be found at [[http://packages.reseaulibre.ca:8080/Routeurs]].  The image can be configured as desired and the Reseau Libre package feed welcomes contributions.

[[!toc levels=3]]

# Compile openwrt

## Get the openwrt compilation environment

Follow the instructions at [[http://wiki.openwrt.org/doc/howto/buildroot.exigence]]

At step 2, the svn command mentioned will download the trunk.  Click on the link below saying "Downloading sources" for information on how to download specific version.

For the latest attitude adjustment beta, the svn command line would be:

    svn co -r 33883 https://dev.openwrt.org/log/branches/attitude_adjustment

## Get the Reseau libre feed

Get the file from this git:

    git clone git://gitorious.org/reseau-libre-openwrt/reseau-libre-openwrt.git reseau-libre-openwrt


**Say you put the openwrt build environment in `/home/me/openwrt` and the git files are in `/home/me/reseau-libre-openwrt`**

## Add reseau libre feed

Add the reseaulibre feed to openwrt by editing the file `/home/me/openwrt/feeds.conf.default` and add the following line:

    src-link reseaulibre /home/me/reseau-libre-openwrt/reseaulibre-feed

## Update the feeds

    cd /home/me/openwrt
    ./scripts/feeds update -a
    ./scripts/feeds install -a

## Copy the config to openwrt

    cp /home/me/reseau-libre-openwrt/openwrt/.config /home/me/openwrt

## Modify the image (optional)

Optionally, modify the packages to include in the image by running:

    make menuconfig

There, navigate to `Network/Reseau Libre` and enable both options with a `*` star to ensure they are part of the produced image, not just as packages.

The `.config` file included in the git is the one used to build the image at [[http://packages.reseaulibre.ca:8080/Routeurs]].  It will build for Ubiquiti products.  The `make menuconfig` command also allows you to change the device for which to build.

## Build the image

You should be good to go.  Type:
  
    make V=99

This may take a few hours. On a quad-core computer, you may want to enable parallelism by adding the `-j4` option. After successful compilation, the images are in the `bin/<arch>` directory.

# Reseau libre package information 

Here are the details on what the Reseau libre packages do:

## reseaulibre-base

This package just lists dependencies, to make sure all packages required or recommended by the Reseau Libre volunteers are included in the image, to avoid having to go through the whole menuconfig

The packages this package depends on are:

    kmod-ipv6 ip kmod-ip6tables ip6tables babeld radvd nano iperf opkg

If you want to remove any of those packages from the image, you'll first have to disable the reseaulibre-base package by running 'make menuconfig'.

## reseaulibre-mesh

This package includes a few user contributed scripts useful when running the image.  These scripts can be executed directly from a command line on the device.

These packages are all source-controlled at [[https://gitorious.org/reseau-libre-openwrt/reseau-libre-openwrt/trees/master/reseaulibre-feed/reseaulibre-mesh/files/usr/bin]] but some of those have their master source somewhere else.  In those cases, the main repository is mentioned.

### babeldstate

Sends the kill signal to the babel process and reads the latest logs

author: bgm?

sources: ?

Usage: 
    babeldstate

### setup_babel

Updates the babel config file for the interfaces in arguments, so there is no need to manually edit the babel configuration for it to work with respectable defaults.

author: tahini

Usage:

    setup_babel interface [interface ...]
    
    Arguments:
        List of interfaces to put on the mesh
    
    EXAMPLE:
        This command line adds the wireless interface and wired interface eth0 to the mesh"
        setup_babel wlan0 eth0"

### setup_reseaulibre

Configures IPv6 with an fd64::/64 (from [[policy/numbering]]) and radvd. This way, you can use this IP block to broadcast an IPv6 route on the mesh, and this route will also be broadcasted on your local network, so devices supporting IPv6 will automatically get access to the mesh.

If your router has access to the Internet, the script will try to automatically find a free IPv6 block in our fd64::/48 block. So you don't need to know anything about IPv6 in order to use this.

Note that in order to use this setup, it is recommended that your br-lan interface be configured as "static". Otherwise, br-lan will send route announcements (RA), and it will assign itself an IP.

author: bgm

Usage:

    setup_reseaulibre interface [ipv6 /64 net block]
    
    Arguments:
        interface: interface to configure (radvd)"
        ipv6 /64 net block (optional): IP block to assign
    
    EXAMPLE:
        setup_reseaulibre br-lan
        setup_reseaulibre br-lan fd64:2c08:9fa7:5::

    If you have an Internet connection, the script will try
    to find the first free netblock.

    The /64 IP block will be selected from:
    http://wiki.reseaulibre.ca/policy/numbering/

    The block will be announced on your local network, so that the other
    devices on that network can access the mesh.

Warning to technical users: the script does a few assumptions. For example, if you are specifying your own /64 block, type it as, for example, "fd64:2c08:9fa7:5::", not "fd64:2c08:9fa7:5::/64". The aim is to automate a simple and most common use-case.

TODO:

* chain with setup_babel
* currently, setup_babel will add all IPs on br-lan, so it will also create IPv4 routes, we also want to make sure babel only exports the fd64::/64 route.
* make sure the firewall configuration is strict, in order to avoid exposing internal services by mistake.


### bat-signal

Displays signal levels from connected Wi-Fi stations. It works with the wifi device and has nothing to do with [[documentation/batman]].

author: bgm, deuxpi

sources: ?

### ubnt-leds

Use the leds on the ubiquiti device to show the strength of the link to one given station.  This was batman dependent, but we leave it here in case somebody wants to update/modify it.

author: ?

sources: ?

# Bugs, todo ?

We do not have a bug tracker at the moment.. feel free to add things here, but try to keep it tidy and realistic.

* Create a script to automatically configure IPv6 with a unique-local fd64 address block?

Also see the brainstorm on network topology:

* http://www.flickr.com/photos/elecnix/8289464397/in/set-72157629757019923/
* http://www.flickr.com/photos/elecnix/8289465011/in/set-72157629757019923/
* http://www.flickr.com/photos/elecnix/8290525058/in/set-72157629757019923/
* http://www.flickr.com/photos/elecnix/8289466231/in/set-72157629757019923/
