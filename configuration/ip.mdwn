[[!toc levels=3]]

## IPv4 configuration

### Static configuration

Currently, IPs in the 192.168.3.x netblock are allocated statically to nodes as we go along.

This will obviously not scale at all, so we need a better solution. A workaround would be to switch to the wider `172.16.0.0/12` private B class from [[!rfc 1918]], which is what is used in Rostock.

## IPv6 configuration

### OpenWRT

Install necessary packages on OpenWRT:

    opkg update
    opkg install kmod-ipv6 radvd ip kmod-ip6tables ip6tables

This should normally automagically configure your node with IPv6, at
least when your node is configured with DHCP. Unfortunately we still
use static IPs, so you should add this to your `/etc/config/network`:

    config interface 'lan'
        option accept_ra 1
        option send_rs 1

Disable the IPv6 firewall by uncommenting this line in `/etc/config/firewall`:

    #	option disable_ipv6	1

To enable routing, put this in your `/etc/sysctl.conf`:

    net.ipv6.conf.all.forwarding=1

Other howtos:

 * [Freifunk Mesh6 documentation](http://wiki.freifunk.net/6mesh.freifunk.net)
 * [OpenWRT IPv6 howto](http://wiki.openwrt.org/doc/howto/ipv6)
 * [OpenWRT config/network reference](http://wiki.openwrt.org/doc/uci/network)
 * [SixXS.net guide to OpenWRT and IPv6](https://www.sixxs.net/wiki/Configuring_OpenWRT_on_an_NSLU2)

### FreeBSD

Here we assume that behind your mesh node, you have an "authoritative"
router which has an IPv6 netblock it wants to announce on the
mesh. This can be done with the following configurations:

In `rc.conf`:

    ipv6_ifconfig_vr2="fd64:2c08:9fa7::1/64"
    rtadvd_enable="YES"
    rtadvd_interfaces="vr2"

This can be implemented immediatly with:

    ifconfig vr2 inet6 d64:2c08:9fa7::1/64
    rtadvd vr2

### Note on IPv6 ULA prefixes

Freifunk
[recommends we use the ULA prefixes](http://wiki.freifunk.net/6mesh.freifunk.net),
and specifically the `fdca:ffee:babe:dada::/64`, but I don't see why
we should stick with that prefix, which is bound to Freifunk
(ie. Berlin), to which we are not interconnected.

ULA prefixes are "local prefixes" (think like 192.168.0.1) but that
are unique across sites *and* can potentially be routed between
sites. See [[!rfc 4193]] for more information about this.

We are using 2c08:9fa7::/48 as our prefix. This prefix is advertised
from the mesh, so you should be able to see some routes and your
machine should autoconfigure itself.

> ''This prefix was chosen on
> [SixXS.net](https://www.sixxs.net/tools/grh/ula/), using the MAC
> address of my router. It was also registered there under Anarcat's
> email address.''

If you want to use a static IP in that network, document it here
first.

Known allocations:

 * `2c08:9fa7::1/64` - `roadkiller.anarcat.ath.cx` - router behind [[nodes/anarcat]]

## Connecting to an existing network

A mesh is fun, but otherwise not very useful until services are plugged into it. This means plugging this open wireless into your machines, which may be a security issue.

A good approach is to allocate a specific port on your firewall and allow it only some access to your internal network, and, maybe, the internet.

First, you need to determine the policy. Here is mine:

 * no DHCP on the interface - we do not want to pollute the LAN
 * use up one IP in the IPv4 network (192.168.3.1 for my node, use
   your own!)
 * publish an IPv6 /64 network (minimum size), see above for
   configuration and allocation
 * block packets by default
 * allow to my server: port  SSH (22)
   * HTTP (80)
   * HTTPS (443)
   * IMAPS (993)
   * XMPP (5222)
   * OpenVPN (1194)
   * git (9418)
   * streaming/icecast (8000)
   * jukebox/MPD (6600)
   * outgoing ICMP

The above rules can be done with the following patch to a pf.conf, for
OpenBSD's PF (Packet Filter):

[[!format txt """
diff --git a/pf.conf b/pf.conf
index 8ecb84f..796d847 100644
--- a/pf.conf
+++ b/pf.conf
@@ -9,6 +9,7 @@
 dmz_if = "vr3"
 # lan_if = "vr1"
 lan_if = "bridge0"
+mesh_if = "vr2"
 ext_if = "ng0"
 tun_if = "gif0"

@@ -25,7 +26,7 @@ set skip on lo0

 # those interfaces are bridged on $lan_if
 set skip on vr1
-set skip on vr2
+#set skip on vr2

 ########################################################################
 # ALTQ (traffic shaping) configuration
@@ -190,6 +191,26 @@ pass in on $lan_if proto tcp from any to ($lan_if) port 10001:20001
 pass in on $lan_if proto udp from any to ($lan_if) port 10001:20001

 ##############################
+# Mesh network ruls
+# block by default
+block in log on $mesh_if all
+pass out on $mesh_if all
+
+# DNS
+pass in on $mesh_if proto udp from any to ($mesh_if) port 53
+# allow access to some services on marcos
+pass in on $mesh_if proto tcp from any to $marcos port 22
+pass in on $mesh_if proto tcp from any to $marcos port 80
+pass in on $mesh_if proto tcp from any to $marcos port 443
+pass in on $mesh_if proto tcp from any to $marcos port 993
+pass in on $mesh_if proto tcp from any to $marcos port 9418
+pass in on $mesh_if proto tcp from any to $marcos port 8000
+pass in on $mesh_if proto tcp from any to $marcos port 6600
+pass in on $mesh_if proto tcp from any to $marcos port 6601
+# test: http://talk.maemo.org/showthread.php?p=722127
+#pass in on $mesh_if proto tcp from any to $marcos port 5434
+
+##############################
 # DMZ rules
 # block by default
 block in log on $dmz_if all
""" ]]

To allow access to the internet in general, I also throw in those
rules:

 * allow to everywhere:
   * port SSH (22)
   * HTTP (80)
   * HTTPS (443)
   * IMAPS (993)
   * XMPP (5222)
   * OpenVPN (1194)
   * git (9418)
   * SMTP submissions (587)
   * outgoing ICMP

Then those services can be advertised in different ways:

 * through protocols like
   "[Zeroconf](https://en.wikipedia.org/wiki/Zero_configuration_networking)"
   ([Avahi](http://www.avahi.org/) in Linux, Bonjour in Apple, SSDP in
   Microsoft
 * by documenting it here

### Available services

 * DNS server at `192.168.3.1` / `fd64:2c08:9fa7::1` (`roadkiller.anarcat.ath.cx`)
 * http://mesh.openisp.ca/ - this wiki, should be running on
   `marcos.orangeseeds.org` (`2001:1928:1:9::1`), which should be
   routed by roadkiller, above
 * this wiki is also available through git
 * http://anarcat.ath.cx/ - various services, also available through
   `marcos`

We can already observe a basic problem here: globally routable IPs are
not easily reachable from the mesh without adding static routes. This
is something I hope [[olsrd]] can fix.
