[[!toc levels=3]]

# IP allocation strategy

IP addresses are allocated on a first come first serve basis. We
strongly encourage clever use of IPv6 to avoid starvation.

## IPv4

[[!table class="pagecloud" data="""
IP | Hardware | wifi MAC | Location
192.168.3.88 | Linksys WRT54G | 00:25:9c:5e:44:59 | elecnix/grace
192.168.3.89 | Linksys WRT54G | 00:13:10:1b:6d:dd | elecnix/pierre
192.168.3.90 | Bullet M2 #2 | 00:15:6d:db:d3:65 | [[nodes/boulette]]
192.168.3.91 | Bullet M2 #1 | 00:15:6D:DB:D3:DC | [[nodes/benoitg]]
192.168.3.92 | PicoStation M2 | 00:15:6d:81:e0:5b
192.168.3.93 | NanoStation M2 | 00:15:6d:fc:be:90
192.168.3.94 | NanoBridge | 00:15:6d:5a:f7:27
192.168.3.99 | Linksys WRT54G | 00:1C:10:22:02:AE | [[nodes/carton]]
"""]]

Currently, IPs in the `192.168.3.0/24` netblock are allocated statically to nodes as we go along.
This is the result of the first informal allocation during the [[meetings/2012-04-06-antenna-party]].

Note that some IPs may have been allocated without being marked
here.

This will obviously not scale at all, so we need a better solution. A workaround would be to switch to the wider `172.16.0.0/12` private B class from [[!rfc 1918]], which is what is used in Rostock.
    
Note: the table on the right is manually maintained and may fall out of sync with the data in [[nodes]]. We are looking forward towards [support for aggregating definition lists in ikiwiki](http://ikiwiki.info/todo/internal_definition_list_support/) (and if people are interested on working on this it would be great), but in the meantime this is error-prone...

## IPv6

Known allocations:

 * `fd64:2c08:9fa7::1/48` - `roadkiller.anarcat.ath.cx` - router behind [[nodes/boulette]]
 * `fd64:2c08:9fa7:1::1/64` - `boulette.anarcat.ath.cx` - [[nodes/boulette]] itself, announcing a subnet of the above `/48`
 * `fd64:2c08:9fa7:1::2/64` - `carton.anarcat.ath.cx` - a static node on the above network (not configured yet)

### Note on ULA prefixes

ULA prefixes are "local prefixes" (think like `192.168.0.1`) but that
are unique across sites *and* can potentially be routed between
sites. See [[!rfc 4193]] for more information about this. Freifunk
[recommends we use the ULA prefixes](http://wiki.freifunk.net/6mesh.freifunk.net),
and specifically the `fdca:ffee:babe:dada::/64`, but I don't see why
we should stick with that prefix, which is bound to Freifunk
(ie. Berlin), to which we are not interconnected.

We are using `fd64:2c08:9fa7::/48` as our prefix. This prefix is advertised
from the mesh, so you should be able to see some routes and your
machine should autoconfigure itself. If you want to use a static IP in that network, document it here
first.

> *Note: the mesh prefix was chosen on
> [SixXS.net](https://www.sixxs.net/tools/grh/ula/), using the MAC
> address of my router. It was also registered there under Anarcat's
> email address.*

# Device configuration

This section documents how you can configure your device to use an IP
above. When you do, please document in the above tables and in your
[[nodes]] page, unless of course the adress is autoconfigured.

## OpenWRT

To configure the IP address on a OpenWRT device, use this:

    uci set network.lan.ipaddr=192.168.3.88
    uci set network.lan.gateway=192.168.3.1
    uci set network.lan.dns=192.168.3.1

You may also commonly disable the DHCP server on LAN, so as to not
interfere with another router:

    uci set dhcp.lan.ignore=1

[!] Warning: the above will make it more difficult to reach the
machine again after a reboot. You will need to statically configure
your laptop if it is the only device connected to the device, for
example.

### IPv6

IPv6 on OpenWRT requires a bit more effort.

First, install necessary packages on OpenWRT:

    opkg update
    opkg install kmod-ipv6 radvd ip kmod-ip6tables ip6tables

Then configure a static IP address:

    uci set network.lan.ip6addr="fd64:2c08:9fa7::2/64"

Finally the following will make sure that clients can autoconfigure:

    uci set radvd.@prefix[0].ignore=0

> *You could also replace the above by the following to make the LAN
> interface autoconfigure if there is another router present:*
    
        uci set network.lan.accept_ra=1
        uci set network.lan.send_rs=1

Make sure the IPv6 firewall is enabled:

    uci set firewall.defaults.disable_ipv6=0

To enable routing, put this in your `/etc/sysctl.conf`:

    net.ipv6.conf.all.forwarding=1

Other howtos:

 * [Freifunk Mesh6 documentation](http://wiki.freifunk.net/6mesh.freifunk.net)
 * [OpenWRT IPv6 howto](http://wiki.openwrt.org/doc/howto/ipv6)
 * [OpenWRT config/network reference](http://wiki.openwrt.org/doc/uci/network)
 * [SixXS.net guide to OpenWRT and IPv6](https://www.sixxs.net/wiki/Configuring_OpenWRT_on_an_NSLU2)


## FreeBSD

In `rc.conf`:

    ifconfig_vr0="inet 192.168.3.88"
    defaultrouter="192.168.0.1"

If this host is to be a router, use instead:

    ifconfig_vr0="inet 192.168.3.88"
    gateway_enable="YES"

### IPv6

Here we assume that behind your mesh node, you have an "authoritative"
router which has an IPv6 netblock it wants to announce on the
mesh. This can be done with the following configurations:

In `rc.conf`:

    ipv6_ifconfig_vr2="fd64:2c08:9fa7::1/48"
    rtadvd_enable="YES"
    rtadvd_interfaces="vr2"

This can be implemented immediatly with:

    ifconfig vr2 inet6 fd64:2c08:9fa7::1/48
    rtadvd vr2

# Issues and todos

We can already observe a basic problem here: globally routable IPs are
not easily reachable from the mesh without adding static routes. This
is something I hope [[olsrd]] can fix.

Another option is to use `pinfoflags` field in `rtadvd.conf` to unset the second bit, the `autonomous address-configuration flag` (section 4.6.2 in [[!rfc 2461]]), which would disable the use of that prefix in address autoconfiguration while at the same time announcing the route. To be tested.
