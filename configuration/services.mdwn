[[!meta title="Adding services to the mesh"]]

[[!toc levels=3]]

A mesh is fun, but otherwise not very useful until services are plugged into it. This means plugging some other devices (*servers*) into our open wireless network.

# Currently available services

 * DNS server at `192.168.3.1` / `fd64:2c08:9fa7::1` (`roadkiller.anarcat.ath.cx`)
 * http://mesh.openisp.ca/ - this wiki, should be running on
   `marcos.orangeseeds.org` (`2001:1928:1:9::1`), which should be
   routed by roadkiller, above
 * this wiki is also available through git
 * http://anarcat.ath.cx/ - various services, also available through
   `marcos`

# Naming your device

Assigning a name to your device is important because it allows you to
label it and identify it physically.

You should use the name you have chosen when creating the [[nodes]]
page here.

## OpenWRT

Set a custom name, in case you encouter other peers :-)

    uci set system.@system[0].hostname=meshmtl42

## Linux

    hostname meshmtl42
    hostname > /etc/hostname

## Other systems

In other systems, this can vary wildly, but there is usually a
configuration file for this.

# Providing your own services

Any service that will not disrupt other services should be allowed, although individual nodes may do some filtering to control quality of service.

## Disabling openwrt's firewall

Make sure the user firewall is loaded:

    uci show | grep include

If not, add this:

    uci add firewall include
    uci set firewall.@include[0].path=/etc/firewall.user

Then in `/etc/firewall.user`:

[[!format txt """
#! /bin/sh

# get rid of the openwrt firewall
iptables -F
# set saneunsafe but open defaults
iptables -P INPUT   ACCEPT
iptables -P OUTPUT  ACCEPT
iptables -P FORWARD ACCEPT
# empy NAT
iptables -t nat -F
"""]]

## Providing some services behind a firewall

A good approach is to allocate a specific port on your firewall and allow it only some access to your internal network, and, maybe, the internet.

First, you need to determine the policy. Here is [[anarcat]]'s:

 * no DHCP on the interface - we do not want to pollute the LAN
 * use up one IP in the IPv4 network (192.168.3.1 for my node, use
   your own!)
 * publish an IPv6 /64 network (minimum size), see above for
   configuration and allocation
 * block packets by default
 * allow to my server: port  SSH (22)
   * HTTP (80)
   * HTTPS (443)
   * IMAPS (993)
   * XMPP (5222)
   * OpenVPN (1194)
   * git (9418)
   * streaming/icecast (8000)
   * jukebox/MPD (6600)
   * outgoing ICMP

### OpenBSD's pf implementation

The above rules can be done with the following patch to a pf.conf, for
OpenBSD's PF (Packet Filter):

[[!format txt """
diff --git a/pf.conf b/pf.conf
index 8ecb84f..796d847 100644
--- a/pf.conf
+++ b/pf.conf
@@ -9,6 +9,7 @@
 dmz_if = "vr3"
 # lan_if = "vr1"
 lan_if = "bridge0"
+mesh_if = "vr2"
 ext_if = "ng0"
 tun_if = "gif0"

@@ -25,7 +26,7 @@ set skip on lo0

 # those interfaces are bridged on $lan_if
 set skip on vr1
-set skip on vr2
+#set skip on vr2

 ########################################################################
 # ALTQ (traffic shaping) configuration
@@ -190,6 +191,26 @@ pass in on $lan_if proto tcp from any to ($lan_if) port 10001:20001
 pass in on $lan_if proto udp from any to ($lan_if) port 10001:20001

 ##############################
+# Mesh network ruls
+# block by default
+block in log on $mesh_if all
+pass out on $mesh_if all
+
+# DNS
+pass in on $mesh_if proto udp from any to ($mesh_if) port 53
+# allow access to some services on marcos
+pass in on $mesh_if proto tcp from any to $marcos port 22
+pass in on $mesh_if proto tcp from any to $marcos port 80
+pass in on $mesh_if proto tcp from any to $marcos port 443
+pass in on $mesh_if proto tcp from any to $marcos port 993
+pass in on $mesh_if proto tcp from any to $marcos port 9418
+pass in on $mesh_if proto tcp from any to $marcos port 8000
+pass in on $mesh_if proto tcp from any to $marcos port 6600
+pass in on $mesh_if proto tcp from any to $marcos port 6601
+# test: http://talk.maemo.org/showthread.php?p=722127
+#pass in on $mesh_if proto tcp from any to $marcos port 5434
+
+##############################
 # DMZ rules
 # block by default
 block in log on $dmz_if all
""" ]]

To allow access to the internet in general, I also throw in those
rules:

 * allow to everywhere:
   * port SSH (22)
   * HTTP (80)
   * HTTPS (443)
   * IMAPS (993)
   * XMPP (5222)
   * OpenVPN (1194)
   * git (9418)
   * SMTP submissions (587)
   * outgoing ICMP

## Advertising your services on the mesh

Then those services can be advertised in different ways:

 * through protocols like
   "[Zeroconf](https://en.wikipedia.org/wiki/Zero_configuration_networking)"
   ([Avahi](http://www.avahi.org/) in Linux, Bonjour in Apple, SSDP in
   Microsoft
 * by documenting it in this page, above

# Allowing or preventing wireless clients inter-communication

You may wish to allow or prevent wireless clients connected your node to communicate with wireless clients from other nodes. Batman has a feature to control this called Ap-Isolation. Note that this allows/prevents *wireless* clients of different nodes from communicating, but not *wired* clients, and also does not block broadcast or multicast packets if it is activated. Also, this does not prevent communication between wireless clients connected to the same node. This should be managed at another level on the AP. So far, I've only found the "isolate" flag in OpenWRT's interface configuration, but this only works with AP mode. What about ad-hoc?

To toggle Ap-isolation:

    batctl ap_isolation 1

or

    batctl ap 1

More information about this on the [[batman-adv wiki|http://www.open-mesh.org/wiki/batman-adv/Ap-isolation]]
