[[!meta title="B.A.T.M.A.N. mesh network"]]

B.A.T.M.A.N., a "Better Approach To Mobile Ad-hoc Networking", is an alternative to [[OLSR|olsrd]]. The current implementation is "batman-adv", which works on the Layer 2. This makes the network look like "one big switch". You can use whatever layer 3 protocol on top of that (ipv4, ipv6, ipx, etc.).

[[!toc levels=3]]

# Prérequis

 1. [[Flashing]] de votre routeur
 2. Configuration du mode [[ad-hoc]]

## Installer les logiciels nécessaires

ATTENTION: toutes les nodes doivent utiliser la même version de batman-adv. Par conséquent, il faut la dernière version du module (2012.0) pour votre noyau Linux.

### Sur Debian

Sous Debian/Ubuntu, installer le package Debian pour batctl (gestion des configurations)

    sudo apt-get install batctl

Idéalement il faut aussi un noyau Linux qui est à jour. Pour nos tests, ça fonctionnait très bien avec linux 3.2, avec batctl version 2012.0.0.
Par exemple:

    uname -a
    apt-cache search linux-image-3
    sudo apt-get install linux-image-2.3.0-1-686-pae

Si vous avez mis à jour votre noyau, il faut redémarrer la machine.

Activer le module kernel (la majorité des distributions Linux ont ce module par défaut)

    modprobe batman-adv

Configurer l'interface physique wifi pour le mode adhoc du mesh. Il faut probablement désactiver network-manager.

    sudo /etc/init.d/network-manager stop
    iwconfig wlan0  mode ad-hoc  channel 1  essid mesh-mtl  ap 02:51:48:72:03:11

Configurer l'interface réseau, il faut augmenter le MTU car les "packets" de Batman ajoutent des données aux frames ethernet:

    ifconfig wlan0 mtu 1528 192.168.8.2 up

Ajouter l'interface à Batman:

    batctl if add wlan0

### Sur Archlinux
On besoin de l'[[AUR | https://aur.archlinux.org/]]

    # modprobe batman_adv
    $ yaourt -S batctl

### Sur OpenWRT

Il y a un paquet nommé kmod-batman-adv pour OpenWRT. Dans la version stable de OpenWRT ('backfire'), on retrouve une ancienne version de batman: 2011.2.0. Les noeuds de Montréal sont installés avec la version 2012.0.0 de batman. Il faut donc installer la version 'trunk' de OpenWRT. Il existe heureusement des [[images trunk pré-compilées|http://downloads.openwrt.org/snapshots/trunk/]] pour chaque matériel supporté.

Il est aussi possible de [[compiler soi-même OpenWRT|http://wiki.openwrt.org/doc/howto/build]] et [[compiler batman en même temps|http://www.open-mesh.org/wiki/batman-adv/Building-with-openwrt]].

Dans les deux cas, une fois l'image obtenue, vous devez "[[flasher|flashing]]" votre routeur.


Connect a cable from the LAN to your PC.
Set your PC to get an IP address automatically.
Get into the router with its default IP address.

    telnet 192.168.1.1

Configure the router LAN interface to match the network
of the home router this will be plugged into eventually.

    uci set network.lan.ipaddr=192.168.3.88
    uci set network.lan.gateway=192.168.3.1
    uci set network.lan.dns=192.168.3.1

Disable DHCP server on LAN, so as to not interfere with home router.

    uci set dhcp.lan.ignore=1

Activer la radio

    uci delete wireless.radio0.disabled

Set a custom name, in case you encouter other peers :-)

    uci set system.@system[0].hostname=batman-88

Écrire les changements et redémarrer

    uci commit
    reboot & exit

> Note: only restarting network will not update the DHCP server.

Disconnect the PC from the router and now connect both the
PC and the mesh router to the home router.
Re-connect to the router using its new IP address.

    telnet 192.168.3.88

Install B.A.T.M.A.N (the home router provides access to internet)

    opkg update
    opkg install kmod-batman-adv

> Si l'installation cause problème (prend trop de temps, donne erreur de mémoire insuffisante), alors il faut télécharger "à la main" le paquet et sa dépendance (kmod-lib-crc16 dans trunk et kmod-crc16 dans backfire). Il faut trouver l'URL du paquet et faire quelque chose comme:

    cd /tmp
    touch /tmp/opkg.conf
    opkg -f /tmp/opkg.conf install http://downloads.openwrt.org/snapshots/trunk/brcm47xx/packages/kmod-lib-crc16_3.2.13-1_brcm47xx.ipk \
        http://downloads.openwrt.org/snapshots/trunk/brcm47xx/packages/kmod-batman-adv_3.2.13+2012.0.0-1_brcm47xx.ipk

Le module `batman_adv` devrait maintenant être chargé:

    lsmod | grep batman

You should see: batctl 2012.0.0

    batctl -v

We have enabled wireless previously. Now, verify that the wifi interface
is listed. If not, you must have flashed the wrong image!

    iwconfig

Wifi network no longer 'lan'

    uci delete wireless.@wifi-iface[0].network

Montreal mesh standards: channel 1, adhoc, named mesh-mtl. Il faut specifier un BSSID pour s'assurer que tous les routeurs soient dans la meme cellule.

    uci set wireless.radio0.channel=1
    uci set wireless.@wifi-iface[0].mode=adhoc
    uci set wireless.@wifi-iface[0].ssid=mesh-mtl
    uci set wireless.@wifi-iface[0].bssid=02:51:48:72:03:11

Le MTU du LAN est standard:

    uci set network.lan.mtu=1500

Configuration de l'interface sans-fil avec MTU plus élevé pour batman:

    uci set network.wlan0=interface
    uci set network.wlan0.ifname=wlan0
    uci set network.wlan0.proto=none
    uci set network.wlan0.mtu=1528

Configuration de l'interface de batman. Ici, `192.168.8.100` a été choisi alléatoirement.

    uci set network.bat0=interface
    uci set network.bat0.ifname=bat0
    uci set network.bat0.proto=none
    uci set network.bat0.mtu=1500

The 'lan' bridge should include bat0

    uci set network.lan.ifname="eth0 bat0"

(!) The above may be eth0.0 instead of eth0. For linksys it's eth0.0,
for ubiquity it's eth0. Look at the output of ifconfig to see what's
the eth0 interface.

> NOTE: Do we really want to bridge the mesh with the LAN?
Won't that generate too much traffic if the packets
received on the LAN are broadcasted in the mesh?

Tell batman to use the wireless and the lan interfaces.

    uci set batman-adv.bat0.interfaces="wlan0 br-lan"

You're done! Commit the changes and reboot to test them.

    uci commit
    reboot & exit

After a reboot, you should see `wlan0: active` and `br-lan: active` with this:

    batctl if

```
root@batman-88:/# brctl show
bridge name     bridge id               STP enabled     interfaces
br-lan          8000.00259c5e4457       no              eth0.0
                                                        bat0
root@batman-88:/# batctl if
wlan0: active
br-lan: active
```

### Sur DD-WRT

todo

### Sur AirOS (Ubiquiti)

todo

# Configuration de Batman

Afficher l'état:

    batctl if

Activer l'interface:

    ifconfig bat0 up

Voilà, on n'a pas d'adresses IP de configurées (à moins d'utiliser IPv6, todo: à documenter), mais on peut faire des "pings" en utilisant les adresses MAC:

    batctl tcpdump wlan0
    batctl ping 00:11:22:33:44:55
    batctl traceroute 00:11:22:33:44:55

Autres commandes utiles pour voir les nodes locales (mesh seulement) ou toutes les nodes accessibles via le mesh (global):

    batctl translocal
    batctl transglobal

## Assignation d'adresses IP

Si on veut faire une communication utile entre les machines, il faut assigner des adresses IP. On peut utiliser du DHCP, des adresses statiques ou IPv6.

## IPv4 statique

Assigner une adresse unique par machine. Par exemple:

    ifconfig bat0 192.168.1.10

## IPv6 avec les adresses locales

todo

## IPv6 avec routage et découverte "stateless"

todo

# Diagnostiques

En général, batman ou le mode ad-hoc affiche régulièrement des messages kernel, on peut y accéder par:

    dmesg | tail

ou:

    tail -f /var/log/messages

Voir aussi la page [[ad-hoc]] si vous avez des difficultés avec le
lien physique.

# Références

 * [Main project page open-mesh.org](http://www.open-mesh.org/)
  * [batman-adv](http://www.open-mesh.org/projects/batman-adv/wiki)
  * [batman-adv quickstart guide](http://www.open-mesh.org/wiki/batman-adv/Quick-start-guide)
  * [user guide with most of the docs](http://www.open-mesh.org/wiki/open-mesh/UserDocs)
