FreeBSD
-------

(server conf)

    pkg_add -r openvpn

Then add this to `/etc/rc.conf` to make sure the daemon is started on
boot:

    openvpn_enable="YES"      # set to YES to enable openvpn
    openvpn_if="tap"          # driver(s) to load, set to "tun", "tap" or "tun tap"

Load the tap device:

    kldload if_tap

You also need to add this to `/boot/loader.conf`:

    if_tap_load="YES"

create the `/usr/local/etc/openvpn/openvpn.conf` file: see [the FreeBSD
diary howto][openvpn] for a sample file.

using the easy-rsa package, here are my changes to the `vars` as
suggested in the [SSL howto][ca-howto].

[[!format diff """
--- vars.org    2012-05-15 00:54:05.000000000 -0400
+++ vars        2012-05-15 00:54:07.000000000 -0400
@@ -50,7 +50,7 @@
 # down TLS negotiation performance
 # as well as the one-time DH parms
 # generation process.
-export KEY_SIZE=1024
+export KEY_SIZE=2048

 # In how many days should the root CA key expire?
 export CA_EXPIRE=3650
@@ -61,8 +61,8 @@
 # These are the default values for fields
 # which will be placed in the certificate.
 # Don't leave any of these fields blank.
-export KEY_COUNTRY="US"
-export KEY_PROVINCE="CA"
-export KEY_CITY="SanFrancisco"
-export KEY_ORG="Fort-Funston"
-export KEY_EMAIL="me@myhost.mydomain"
+export KEY_COUNTRY="CA"
+export KEY_PROVINCE="QC"
+export KEY_CITY="Montreal"
+export KEY_ORG="Anarcat"
+export KEY_EMAIL="anarcat@orangeseeds.org"
"""]]

Then this series of easy commands:

    ./clean-all
    ./build-ca
    ./build-key-server myserver.example.com
    ./build-dh
    ./build-key client.example.com

(To be continued: the build-dh step is still generating that 2048 bit
prime - maybe a bad idea to be paranoid about that bit...)

[openvpn-routed]: http://www.freebsddiary.org/openvpn-routed.php
[openvpn]: http://www.freebsddiary.org/openvpn.php
[ca-howto]: http://www.freebsddiary.org/openvpn-easy-rsa.php

Debian
------

(client conf)

    apt-get install openvpn

I use pretty much the stock config in [the client part of the OpenVPN
howto][openvpn], but note that you can use ifup/down (and Network
Manager) to automatically start/stop OpenVPN instances depending on
network conditions, which is especially relevant on laptops, for
example.

I transfer the client certificate created in the last step of the above
FreeBSD config to the Debian client.

To consider
-----------

The above configuration basically hardcodes routes and netblocks. This
means that the clients are necessarily on a different subnet than the
server, although routes are magically added to make sure this still
works.

A better option would be to use the bridge mode:

http://openvpn.net/index.php/open-source/documentation/miscellaneous/76-ethernet-bridging.html

... in which clients are directly on the local network, which requires
OS-level bridge configuration outside of OpenVPN.

Another option would be to add tap0, the openvpn interface, to the mesh
itself, so that the BATMAN mesh would run on top of the VPN.
