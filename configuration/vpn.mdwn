[[!toc levels=2]]

OpenVPN: providing client access to the mesh
============================================

The following configurations use OpenVPN to allow external users to access the mesh directly.

/!\ Warning: this will give users to which you give access (through the SSL certificate) complete access to your internal network.

FreeBSD
-------

This is the server configuration, which we assume you are running on a router. It is quite FreeBSD-specific, but the OpenVPN configuration should be similar.

    pkg_add -r openvpn

Then add this to `/etc/rc.conf` to make sure the daemon is started on
boot:

    openvpn_enable="YES"      # set to YES to enable openvpn
    openvpn_if="tun"          # driver(s) to load, set to "tun", "tap" or "tun tap"

Load the tap device:

    kldload if_tun

You also need to add this to `/boot/loader.conf`:

    if_tun_load="YES"

using the easy-rsa package, here are my changes to the `vars` as
suggested in the [SSL howto][ca-howto].

[[!format diff """
--- vars.org    2012-05-15 00:54:05.000000000 -0400
+++ vars        2012-05-15 00:54:07.000000000 -0400
@@ -50,7 +50,7 @@
 # down TLS negotiation performance
 # as well as the one-time DH parms
 # generation process.
-export KEY_SIZE=1024
+export KEY_SIZE=2048

 # In how many days should the root CA key expire?
 export CA_EXPIRE=3650
@@ -61,8 +61,8 @@
 # These are the default values for fields
 # which will be placed in the certificate.
 # Don't leave any of these fields blank.
-export KEY_COUNTRY="US"
-export KEY_PROVINCE="CA"
-export KEY_CITY="SanFrancisco"
-export KEY_ORG="Fort-Funston"
-export KEY_EMAIL="me@myhost.mydomain"
+export KEY_COUNTRY="CA"
+export KEY_PROVINCE="QC"
+export KEY_CITY="Montreal"
+export KEY_ORG="Anarcat"
+export KEY_EMAIL="anarcat@orangeseeds.org"
"""]]

Then this series of easy commands:

    ./clean-all
    ./build-ca
    ./build-key-server myserver.example.com
    ./build-dh
    ./build-key client.example.com

(To be continued: the build-dh step is still generating that 2048 bit
prime - maybe a bad idea to be paranoid about that bit...)

Create the `/usr/local/etc/openvpn/openvpn.conf` file, [the FreeBSD
diary howto][openvpn] has a good sample file, but we are using a
different, point to point configuration. This is a minimal
configuration, see the OpenVPN configuration for more samples.

    dev tun
    ifconfig 192.168.100.1 192.168.100.2
    # not working?
    push "route 172.16.0.0 255.240.0.0"
    tls-server
    dh /usr/local/etc/openvpn/easy-rsa/2.0/keys/dh2048.pem
    ca /usr/local/etc/openvpn/easy-rsa/2.0/keys/ca.crt
    cert /usr/local/etc/openvpn/easy-rsa/2.0/keys/vpn.orangeseeds.org.crt
    key /usr/local/etc/openvpn/easy-rsa/2.0/keys/vpn.orangeseeds.org.key
    port 1194
    user nobody
    group nobody
    verb 3
    status openvpn-status.log

I was successful in using this configuration to access the mesh (and
indeed my internal network too) by adding extra routes on the client,
as it seems the `push` argument isn't working properly.

[openvpn-routed]: http://www.freebsddiary.org/openvpn-routed.php
[openvpn]: http://www.freebsddiary.org/openvpn.php
[ca-howto]: http://www.freebsddiary.org/openvpn-easy-rsa.php

Debian
------

This is the client configuration.

    apt-get install openvpn

I use pretty much the stock config in [the client part of the OpenVPN
howto][openvpn], but note that you can use ifup/down (and Network
Manager) to automatically start/stop OpenVPN instances depending on
network conditions, which is especially relevant on laptops, for
example.

I transfer the client certificate created in the last step of the above
FreeBSD config to the Debian client.

Other considerations
--------------------

The above configuration basically hardcodes routes and netblocks. This
means that the clients are necessarily on a different subnet than the
server, although routes are magically added to make sure this still
works.

A better option would be to use the [bridge mode configuration]() in
which clients are directly on the local network, which requires
OS-level bridge configuration outside of OpenVPN.

[bridge mode configuration]: http://openvpn.net/index.php/open-source/documentation/miscellaneous/76-ethernet-bridging.html

Another option would be to add tap0, the openvpn interface, to the mesh
itself, so that the BATMAN mesh would run on top of the VPN. This
seems rather perilous, and i was not able to run either BATMAN or
OpenVPN in bridge mode in FreeBSD.

mesh interconnect with tinc
===========================

[tinc]() is being considered instead of IPsec or OpenVPN for the mesh,
for 2 reasons:

 1. it is deployed for use in the Freifunk mesh
 2. it supports full mesh routing (all nodes have access to all nodes,
    no client/server model)

tinc supports bridged mode like OpenVPN does, which should also allow
us to send Babel broadcasts across the network.

A disadvantage of tinc is that Windows isn't as well supported,
[relying on Cygwin/MinGW](http://www.tinc-vpn.org/faq/#index9h3).

[tinc]: http://www.tinc-vpn.org/

Configuring one node
--------------------

The directory structure of tinc configuration files is important, so
you first need to create that:

    mkdir -p /etc/tinc/reseaulibre/hosts

Here we have created the `hosts` directory that will hold the node
configurations for the `reseaulibre` network. Then we need to create a
configuration file for this host:

    Name = roadkiller
    Device = /dev/tap1
    Mode = switch

Note that we use `tap1` because `tap0` is taken up by OpenVPN in my
tests. This configuration file defines what the current host, but we
need to create a corresponding configuration file in `hosts` on every
host in the tinc mesh, including the current host, for example in
`hosts/roadkiller`:

    Address = vpn.orangeseeds.org
    Subnet = 192.168.101.0/24

This is for my laptop:

    Address = angela.anarcat.ath.cx
    Subnet = 192.168.101.42/32

SSL certificates
----------------

SSL certificates are created with this command in the `1.0` serie
(this changes in later releases):

    tincd -n reseaulibre -K

This will create a private key for the host in
`reseaulibre/rsa_key.priv` and add the public key material to the
`hosts/roadkiller` configuration file.

IP allocation
-------------

Each host in the network needs to have an IP allocated in the
mesh. This IP is assigned to the interface, so it needs to be
different than existing IPs you have configured on your network. This
is defined in the `tinc-up` startup script:

    ifconfig $INTERFACE 192.168.101.43 255.255.255.0 up

The script needs to be made executable:

    chmod a-x tinc-up

For my laptop:

    ifconfig $INTERFACE 192.168.101.42 255.255.255.0 up

Connecting with babel
---------------------

The resulting device can be added to the list of interfaces used by
Babel for its routing:

    babeld -D tap1

Since this is now in "switched" mode, babeld will pass announcements
through that device and add proper routing.

Current status
--------------

Even though babel can send routing information through the tunnel,
actual packets are not going through the interface once babel goes
up. At least the point to point configuration actually works with tinc
now.
